0000 | 38460 | 00111000010001100000 | ADD R1 R3 #0 ; only because of test bench 
0001 | 59400 | 01011001010000000000 | CONST R5 #0 ; erase state 
0002 | 98420 | 10011000010000100000 | CHKH R1 ; R1 zp 
0003 | 10003 | 00010000000000000011 | BRzp LBL_MOD 
0004 | A0840 | 10100000100001000000 | TCS R2 
0005 | A8420 | 10101000010000100000 | TCDH R1 
0006 | 59401 | 01011001010000000001 | CONST R5 #1 ; need to set flag to invert at the end only one was neg 
0007 | 90422 | 10010000010000100010 | SDL R1 R1 R2 ; split into 257 and 255 
0008 | 60841 | 01100000100001000001 | SLL R2 R2 #1 
0009 | 68841 | 01101000100001000001 | SRL R2 R2 #1 ; ^ and this clear out top bit 
000a | 58C00 | 01011000110000000000 | CONST R3 #0 
000b | 38020 | 00111000000000100000 | ADD R0 R1 #0 ; R0 <- p 
000c | 39020 | 00111001000000100000 | ADD R4 R1 #0 ; R4 <- p 
000d | 29022 | 00101001000000100010 | ADD R4 R1 R2 ; {carry R4} <- p + r 
000e | B0C60 | 10110000110001100000 | ADDc R3 R3 ; R3 = R3 + carry 
000f | 60404 | 01100000010000000100 | SLL R1 R0 #4 ; R1 <- p[WORD_SIZE-5:0] 
0010 | 29024 | 00101001000000100100 | ADD R4 R1 R4 ; {carry R4} <- R4 + p[WORD_SIZE-5:0] 
0011 | B0C60 | 10110000110001100000 | ADDc R3 R3 ; R3 = R3 + carry 
0012 | 60401 | 01100000010000000001 | SLL R1 R0 #1 ; R1 <- p[WORD_SIZE-2:0] 
0013 | 29024 | 00101001000000100100 | ADD R4 R1 R4 ; {carry R4} <- R4 + p[WORD_SIZE-1:0] 
0014 | B0C60 | 10110000110001100000 | ADDc R3 R3 ; R3 = R3 + carry 
0015 | 6840E | 01101000010000001110 | SRL R1 R0 #14 ; R1 = p[WORD_SIZE-2:WORD_SIZE-5] 
0016 | 28C23 | 00101000110000100011 | ADD R3 R1 R3 ; R3 = R3 + p[WORD_SIZE-2:WORD_SIZE-5] 
0017 | 6840F | 01101000010000001111 | SRL R1 R0 #15 ; R1 = p[WORD_SIZE-2] 
0018 | 28C23 | 00101000110000100011 | ADD R3 R1 R3 ; R3 = R3 + p[WORD_SIZE-2] 
0019 | 38880 | 00111000100010000000 | ADD R2 R4 #0 ; R2 = R4 
001a | 38460 | 00111000010001100000 | ADD R1 R3 #0 ; R1 = R3 
001b | 181EB | 00011000000111101011 | BRnp LBL_MOD ; If top bits aren't empty then need to run mod again 
001c | 38200 | 00111000001000000000 | ADD R0 R16 #0 ; move R16 to R0 
001d | 31002 | 00110001000000000010 | SUB R4 R0 R2 ; Check if R16 > R2 
001e | 201E8 | 00100000000111101000 | BRnz LBL_MOD 
001f | 38040 | 00111000000001000000 | ADD R0 R2 #0 ; Move result into R0 
0020 | 814A0 | 10000001010010100000 | CHKL R5 ; is R0 0 or 1 
0021 | 08003 | 00001000000000000011 | BRz LBL_END_MOD 
0022 | 38800 | 00111000100000000000 | ADD R2 R0 #0 
0023 | 38600 | 00111000011000000000 | ADD R1 R16 #0 
0024 | 30022 | 00110000000000100010 | SUB R0 R1 R2 
0025 | 88000 | 10001000000000000000 | DONE ; Result placed in R0 TODO need to add signed and 255 bit split 
