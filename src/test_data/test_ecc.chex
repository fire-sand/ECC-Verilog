0000 | 5E000 | 01011110000000000000 | CONST R24 #0 
0001 | 5E401 | 01011110010000000001 | CONST R25 #1 
0002 | 5E801 | 01011110100000000001 | CONST R26 #1 
0003 | 5EC00 | 01011110110000000000 | CONST R27 #0 
0004 | 98220 | 10011000001000100000 | CHKH R17 ; Check if R17 is 0 
0005 | 0800E | 00001000000000001110 | BRz END_LABEL 
0006 | 3F300 | 00111111001100000000 | ADD R28 R24 #0 
0007 | 3F720 | 00111111011100100000 | ADD R29 R25 #0 
0008 | 3FB40 | 00111111101101000000 | ADD R30 R26 #0 
0009 | 3FF60 | 00111111111101100000 | ADD R31 R27 #0 
000a | 4000E | 01000000000000001110 | JSR POINT_ADD_SR 
000b | 48221 | 01001000001000100001 | AND R0 R17 #1 
000c | 20005 | 00100000000000000101 | BRnz SHIFT_N 
000d | 3F240 | 00111111001001000000 | ADD R28 R18 #0 
000e | 3F660 | 00111111011001100000 | ADD R29 R19 #0 
000f | 3FA80 | 00111111101010000000 | ADD R30 R20 #0 
0010 | 3FEA0 | 00111111111010100000 | ADD R31 R21 #0 
0011 | 40007 | 01000000000000000111 | JSR POINT_ADD_SR 
0012 | 6C621 | 01101100011000100001 | SRL R17 R17 #1 
0013 | 181F2 | 00011000000111110010 | BRnp ED_LOOP 
0014 | 3E300 | 00111110001100000000 | ADD R24 R24 #0 
0015 | 3E720 | 00111110011100100000 | ADD R25 R25 #0 
0016 | 3EB40 | 00111110101101000000 | ADD R26 R26 #0 
0017 | 3EF60 | 00111110111101100000 | ADD R27 R27 #0 
0018 | 88000 | 10001000000000000000 | DONE ; end of prog 
0019 | 38320 | 00111000001100100000 | ADD R0 R25 #0 ; R0 <- Y1 Need to do this move because of Proc 
001a | 3D8E0 | 00111101100011100000 | ADD R22 R7 #0 ; Save PC of RET 
001b | 30818 | 00110000100000011000 | SUB R2 R0 R24 ; R2 <- Y1 - X1 
001c | 383A0 | 00111000001110100000 | ADD R0 R29 #0 ; R0 <- Y2 Need to do this because of Proc 
001d | 30C1C | 00110000110000011100 | SUB R3 R0 R28 ; R3 <- Y2 - X2 
001e | 40044 | 01000000000001000100 | JSR MULT_SR ; Mult result in R1 R2 
001f | 4005F | 01000000000001011111 | JSR MOD_SR ; Mod result in R0 
0020 | 3A000 | 00111010000000000000 | ADD R8 R0 #0 ; R8 <- A 
0021 | 38320 | 00111000001100100000 | ADD R0 R25 #0 ; R0 <- Y1 Need to do this move because of Proc 
0022 | 28818 | 00101000100000011000 | ADD R2 R0 R24 ; R2 <- Y1 - X1 
0023 | 383A0 | 00111000001110100000 | ADD R0 R29 #0 ; R0 <- Y2 Need to do this because of Proc 
0024 | 28C1C | 00101000110000011100 | ADD R3 R0 R28 ; R3 <- Y2 - X2 
0025 | 4003D | 01000000000000111101 | JSR MULT_SR ; Mult result in R1 R2 
0026 | 40058 | 01000000000001011000 | JSR MOD_SR ; Mod result in R0 
0027 | 3A400 | 00111010010000000000 | ADD R9 R0 #0 ; R9 <- B 
0028 | 38B60 | 00111000101101100000 | ADD R2 R27 #0 ; R2 <- T1 
0029 | 38EE0 | 00111000111011100000 | ADD R3 R23 #0 ; R3 <- 2*d 
002a | 40038 | 01000000000000111000 | JSR MULT_SR ; Mult result in R1 R2 
002b | 40053 | 01000000000001010011 | JSR MOD_SR ; Mod result in R0 
002c | 38800 | 00111000100000000000 | ADD R2 R0 #0 ; R2 <- R0 
002d | 38EA0 | 00111000111010100000 | ADD R3 R21 #0 ; R3 <- T2 
002e | 40034 | 01000000000000110100 | JSR MULT_SR ; Mult result in R1 R2 
002f | 4004F | 01000000000001001111 | JSR MOD_SR ; Mod result in R0 
0030 | 3A800 | 00111010100000000000 | ADD R10 R0 #0 ; R10 <- C 
0031 | 68B41 | 01101000101101000001 | SRL R2 R26 #1 ; R2 <- Z1 * 2 ;; BUG May not work with overflow 
0032 | 58400 | 01011000010000000000 | CONST R1 #0 ; R1 <- 0 for mod 
0033 | 4004B | 01000000000001001011 | JSR MOD_SR ; Mod result in R0 
0034 | 38800 | 00111000100000000000 | ADD R2 R0 #0 ; R2 <- mod result 
0035 | 38FC0 | 00111000111111000000 | ADD R3 R30 #0 ; R3 <- Z2 
0036 | 4002C | 01000000000000101100 | JSR MULT_SR ; Mult result in R1 R2 
0037 | 40047 | 01000000000001000111 | JSR MOD_SR ; Mod result in R0 
0038 | 3AC00 | 00111010110000000000 | ADD R11 R0 #0 ; R11 <- D 
0039 | 38120 | 00111000000100100000 | ADD R0 R9 #0 ; R0 <- B 
003a | 30808 | 00110000100000001000 | SUB R2 R0 R8 ; R2 <- B - A 
003b | 58400 | 01011000010000000000 | CONST R1 #0 ; R1 <- 0 for mod 
003c | 40042 | 01000000000001000010 | JSR MOD_SR ; Mod result in R0 
003d | 3B000 | 00111011000000000000 | ADD R12 R0 #0 ; R12 <- E 
003e | 38160 | 00111000000101100000 | ADD R0 R11 #0 ; R0 <- D 
003f | 3080A | 00110000100000001010 | SUB R2 R0 R10 ; R2 <- D - C 
0040 | 58400 | 01011000010000000000 | CONST R1 #0 ; R1 <- 0 for mod 
0041 | 4003D | 01000000000000111101 | JSR MOD_SR ; Mod result in R0 
0042 | 3B400 | 00111011010000000000 | ADD R13 R0 #0 ; R13 <- F 
0043 | 38160 | 00111000000101100000 | ADD R0 R11 #0 ; R0 <- D 
0044 | 2880A | 00101000100000001010 | ADD R2 R0 R10 ; R2 <- D + C 
0045 | 58400 | 01011000010000000000 | CONST R1 #0 ; R1 <- 0 for mod 
0046 | 40038 | 01000000000000111000 | JSR MOD_SR ; Mod result in R0 
0047 | 3B800 | 00111011100000000000 | ADD R14 R0 #0 ; R14 <- G 
0048 | 38120 | 00111000000100100000 | ADD R0 R9 #0 ; R0 <- B 
0049 | 28808 | 00101000100000001000 | ADD R2 R0 R8 ; R2 <- B - A 
004a | 58400 | 01011000010000000000 | CONST R1 #0 ; R1 <- 0 for mod 
004b | 40033 | 01000000000000110011 | JSR MOD_SR ; Mod result in R0 
004c | 3BC00 | 00111011110000000000 | ADD R15 R0 #0 ; R15 <- H 
004d | 38980 | 00111000100110000000 | ADD R2 R12 #0 ; R2 <- E 
004e | 38DA0 | 00111000110110100000 | ADD R3 R13 #0 ; R2 <- F 
004f | 40013 | 01000000000000010011 | JSR MULT_SR ; Mult result in R1 R2 
0050 | 4002E | 01000000000000101110 | JSR MOD_SR ; Mod result in R0 
0051 | 3E000 | 00111110000000000000 | ADD R24 R0 #0 ; X1 <- X3 
0052 | 389C0 | 00111000100111000000 | ADD R2 R14 #0 ; R2 <- G 
0053 | 38DE0 | 00111000110111100000 | ADD R3 R15 #0 ; R2 <- H 
0054 | 4000E | 01000000000000001110 | JSR MULT_SR ; Mult result in R1 R2 
0055 | 40029 | 01000000000000101001 | JSR MOD_SR ; Mod result in R0 
0056 | 3E400 | 00111110010000000000 | ADD R25 R0 #0 ; Y1 <- Y3 
0057 | 389A0 | 00111000100110100000 | ADD R2 R13 #0 ; R2 <- F 
0058 | 38DC0 | 00111000110111000000 | ADD R3 R14 #0 ; R2 <- G 
0059 | 40009 | 01000000000000001001 | JSR MULT_SR ; Mult result in R1 R2 
005a | 40024 | 01000000000000100100 | JSR MOD_SR ; Mod result in R0 
005b | 3E800 | 00111110100000000000 | ADD R26 R0 #0 ; Z1 <- Z3 
005c | 38980 | 00111000100110000000 | ADD R2 R12 #0 ; R2 <- E 
005d | 38DE0 | 00111000110111100000 | ADD R3 R15 #0 ; R2 <- H 
005e | 40004 | 01000000000000000100 | JSR MULT_SR ; Mult result in R1 R2 
005f | 4001F | 01000000000000011111 | JSR MOD_SR ; Mod result in R0 
0060 | 3EC00 | 00111110110000000000 | ADD R27 R0 #0 ; T1 <- T3 
0061 | 39EC0 | 00111001111011000000 | ADD R7 R22 #0 ; Rest PC of RET 
0062 | 50000 | 01010000000000000000 | RTI ; Return 
0063 | 59800 | 01011001100000000000 | CONST R6 #0 ; R6 <- 0 Both P or Both N 
0064 | 98040 | 10011000000001000000 | CHKH R2 ; R2 zp 
0065 | 10005 | 00010000000000000101 | BRzp LBL_R3 ; if r2 is 0 or pos then branch 
0066 | A0840 | 10100000100001000000 | TCS R2 R2 ; R2 is negative so invert 
0067 | 98060 | 10011000000001100000 | CHKH R3 ; is R3 0 or pos 
0068 | 10005 | 00010000000000000101 | BRzp LBL_R2N ; if R3 is 0 or pos then branch 
0069 | A0C60 | 10100000110001100000 | TCS R3 R3 ; R3 is negative so invert 
006a | 10004 | 00010000000000000100 | BRzp LBL_MULT ; flipped both so can go straight to mult 
006b | 98060 | 10011000000001100000 | CHKH R3 ; R2 is pos need to check R3 
006c | 10002 | 00010000000000000010 | BRzp LBL_MULT ; if r3 is also pos or 0 
006d | A0C60 | 10100000110001100000 | TCS R3 R3 ; r3 is negative so invert 
006e | 59801 | 01011001100000000001 | CONST R6 #1 ; need to set flag to invert at the end only one was neg 
006f | 580FF | 01011000000011111111 | CONST R0 #255 
0070 | 38001 | 00111000000000000001 | ADD R0 R0 #1 ; N = 256 
0071 | 58400 | 01011000010000000000 | CONST R1 #0 ; A = 0; 
0072 | 80040 | 10000000000001000000 | CHKL R2 ; Check lowest bit of Q 
0073 | 08001 | 00001000000000000001 | BRz LBL_F ; Yes/No 
0074 | 28423 | 00101000010000100011 | ADD R1 R1 R3 ; A <- A + B 
0075 | 70422 | 01110000010000100010 | SDRH R1 R1 R2 ; Shift A_Q right 
0076 | 78822 | 01111000100000100010 | SDRL R2 R1 R2 ; Shift A_Q right 
0077 | 3801F | 00111000000000011111 | ADD R0 R0 #-1 ; N <- N - 1 
0078 | 181F9 | 00011000000111111001 | BRnp CHECK_SR ; N == 0? 
0079 | 90422 | 10010000010000100010 | SDL R1 R1 R2 ; split into {257,255} 
007a | 800C0 | 10000000000011000000 | CHKL R6 ; is R0 0 or 1 
007b | 08002 | 00001000000000000010 | BRz LBL_END_MULT 
007c | A0840 | 10100000100001000000 | TCS R2 ; R2 is low bits 
007d | A8420 | 10101000010000100000 | TCDH R1 ; R1 is high bits 
007e | 50000 | 01010000000000000000 | RTI ; Return 
007f | 98020 | 10011000000000100000 | CHKH R1 ; R1 zp 
0080 | 10003 | 00010000000000000011 | BRzp LBL_MOD 
0081 | A0840 | 10100000100001000000 | TCS R2 
0082 | A8420 | 10101000010000100000 | TCDH R1 
0083 | 59001 | 01011001000000000001 | CONST R4 #1 ; need to set flag to invert at the end only one was neg 
0084 | 60841 | 01100000100001000001 | SLL R2 R2 #1 
0085 | 68841 | 01101000100001000001 | SRL R2 R2 #1 ; ^ and this clear out top bit 
0086 | 60024 | 01100000000000100100 | SLL R0 R1 #4 ; R5 <- p << 4 
0087 | 61821 | 01100001100000100001 | SLL R6 R1 #1 ; R6 <- p << 1 
0088 | 28006 | 00101000000000000110 | ADD R0 R0 R6 ; R0 <- p << 4 + p << 1 
0089 | 38C20 | 00111000110000100000 | ADD R3 R1 #0 ; R3 <- R1 
008a | 28003 | 00101000000000000011 | ADD R0 R0 R3 ; R5 <- p << 4 + p << 1 + p 
008b | 28002 | 00101000000000000010 | ADD R0 R0 R2 ; R5 <- p << 4 + p << 1 + p + r 
008c | 80080 | 10000000000010000000 | CHKL R4 ; is R0 0 or 1 
008d | 08003 | 00001000000000000011 | BRz LBL_END_MOD 
008e | 38800 | 00111000100000000000 | ADD R2 R0 #0 
008f | 38600 | 00111000011000000000 | ADD R1 R16 #0 
0090 | 30022 | 00110000000000100010 | SUB R0 R1 R2 
0091 | 88000 | 10001000000000000000 | DONE ; Result placed in R0 
