5E000 # CONST R24 #0 # 0b1011110000000000000 
5E401 # CONST R25 #1 # 0b1011110010000000001 
5E801 # CONST R26 #1 # 0b1011110100000000001 
5EC00 # CONST R27 #0 # 0b1011110110000000000 
3C620 # ADD R17 R17 #0 ; Check if R17 is 0 # 0b111100011000100000 
08014 # BRz END_LABEL # 0b1000000000010100 
3F300 # ADD R28 R24 #0 # 0b111111001100000000 
3F720 # ADD R29 R25 #0 # 0b111111011100100000 
3FB40 # ADD R30 R26 #0 # 0b111111101101000000 
3FF60 # ADD R31 R27 #0 # 0b111111111101100000 
40015 # JSR POINT_ADD_SR # 0b1000000000000010101 
48221 # AND R0 R17 #1 # 0b1001000001000100001 
20012 # BRnz SHIFT_N # 0b100000000000010010 
3F240 # ADD R28 R18 #0 # 0b111111001001000000 
3F660 # ADD R29 R19 #0 # 0b111111011001100000 
3FA80 # ADD R30 R20 #0 # 0b111111101010000000 
3FEA0 # ADD R31 R21 #0 # 0b111111111010100000 
40015 # JSR POINT_ADD_SR # 0b1000000000000010101 
6C621 # SRL R17 R17 #1 # 0b1101100011000100001 
18006 # BRnp ED_LOOP # 0b11000000000000110 
00000 # DONE ; end of prog # 0b0 
38320 # ADD R0 R25 #0 ; R0 <- Y1 Need to do this move because of Proc # 0b111000001100100000 
3D8E0 # ADD R22 R7 #0 ; Save PC of RET # 0b111101100011100000 
30818 # SUB R2 R0 R24 ; R2 <- Y1 - X1 # 0b110000100000011000 
383A0 # ADD R0 R29 #0 ; R0 <- Y2 Need to do this because of Proc # 0b111000001110100000 
30C1C # SUB R3 R0 R28 ; R3 <- Y2 - X2 # 0b110000110000011100 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3A000 # ADD R8 R0 #0 ; R8 <- A # 0b111010000000000000 
38320 # ADD R0 R25 #0 ; R0 <- Y1 Need to do this move because of Proc # 0b111000001100100000 
28818 # ADD R2 R0 R24 ; R2 <- Y1 - X1 # 0b101000100000011000 
383A0 # ADD R0 R29 #0 ; R0 <- Y2 Need to do this because of Proc # 0b111000001110100000 
28C1C # ADD R3 R0 R28 ; R3 <- Y2 - X2 # 0b101000110000011100 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3A400 # ADD R9 R0 #0 ; R9 <- B # 0b111010010000000000 
38B60 # ADD R2 R27 #0 ; R2 <- T1 # 0b111000101101100000 
38EE0 # ADD R3 R23 #0 ; R3 <- 2*d # 0b111000111011100000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
38800 # ADD R2 R0 #0 ; R2 <- R0 # 0b111000100000000000 
38EA0 # ADD R3 R21 #0 ; R3 <- T2 # 0b111000111010100000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3A800 # ADD R10 R0 #0 ; R10 <- C # 0b111010100000000000 
68B41 # SRL R2 R26 #1 ; R2 <- Z1 * 2 ;; BUG May not work with overflow # 0b1101000101101000001 
58400 # CONST R1 #0 ; R1 <- 0 for mod # 0b1011000010000000000 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
38800 # ADD R2 R0 #0 ; R2 <- mod result # 0b111000100000000000 
38FC0 # ADD R3 R30 #0 ; R3 <- Z2 # 0b111000111111000000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3AC00 # ADD R11 R0 #0 ; R11 <- D # 0b111010110000000000 
38120 # ADD R0 R9 #0 ; R0 <- B # 0b111000000100100000 
30808 # SUB R2 R0 R8 ; R2 <- B - A # 0b110000100000001000 
58400 # CONST R1 #0 ; R1 <- 0 for mod # 0b1011000010000000000 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3B000 # ADD R12 R0 #0 ; R12 <- E # 0b111011000000000000 
38160 # ADD R0 R11 #0 ; R0 <- D # 0b111000000101100000 
3080A # SUB R2 R0 R10 ; R2 <- D - C # 0b110000100000001010 
58400 # CONST R1 #0 ; R1 <- 0 for mod # 0b1011000010000000000 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3B400 # ADD R13 R0 #0 ; R13 <- F # 0b111011010000000000 
38160 # ADD R0 R11 #0 ; R0 <- D # 0b111000000101100000 
2880A # ADD R2 R0 R10 ; R2 <- D + C # 0b101000100000001010 
58400 # CONST R1 #0 ; R1 <- 0 for mod # 0b1011000010000000000 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3B800 # ADD R14 R0 #0 ; R14 <- G # 0b111011100000000000 
38120 # ADD R0 R9 #0 ; R0 <- B # 0b111000000100100000 
28808 # ADD R2 R0 R8 ; R2 <- B - A # 0b101000100000001000 
58400 # CONST R1 #0 ; R1 <- 0 for mod # 0b1011000010000000000 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3BC00 # ADD R15 R0 #0 ; R15 <- H # 0b111011110000000000 
38980 # ADD R2 R12 #0 ; R2 <- E # 0b111000100110000000 
38DA0 # ADD R3 R13 #0 ; R2 <- F # 0b111000110110100000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3E000 # ADD R24 R0 #0 ; X1 <- X3 # 0b111110000000000000 
389C0 # ADD R2 R14 #0 ; R2 <- G # 0b111000100111000000 
38DE0 # ADD R3 R15 #0 ; R2 <- H # 0b111000110111100000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3E400 # ADD R25 R0 #0 ; Y1 <- Y3 # 0b111110010000000000 
389A0 # ADD R2 R13 #0 ; R2 <- F # 0b111000100110100000 
38DC0 # ADD R3 R14 #0 ; R2 <- G # 0b111000110111000000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3E800 # ADD R26 R0 #0 ; Z1 <- Z3 # 0b111110100000000000 
38980 # ADD R2 R12 #0 ; R2 <- E # 0b111000100110000000 
38DE0 # ADD R3 R15 #0 ; R2 <- H # 0b111000110111100000 
4005F # JSR MULT_SR ; Mult result in R1 R2 # 0b1000000000001011111 
4006A # JSR MOD_SR ; Mod result in R0 # 0b1000000000001101010 
3EC00 # ADD R27 R0 #0 ; T1 <- T3 # 0b111110110000000000 
39EC0 # ADD R7 R22 #0 ; Rest PC of RET # 0b111001111011000000 
50000 # RTI ; Return # 0b1010000000000000000 
580FF # CONST R0 #255 ; 0000 90FF # 0b1011000000011111111 
38001 # ADD R0 R0 #1 ; 0001 1021 # 0b111000000000000001 
58400 # CONST R1 #0 ; 0002 9200 # 0b1011000010000000000 
81802 # CHK R6 R0 R2 ; 0003 1E0A # 0b10000001100000000010 
08065 # BRz LBL_F ; 0004 0401 # 0b1000000001100101 
28423 # ADD R1 R1 R3 ; 0005 1243 # 0b101000010000100011 
70422 # SDRH R1 R1 R2 ; 0006 125A # 0b1110000010000100010 
78822 # SDRL R2 R1 R2 ; 0007 A47A # 0b1111000100000100010 
3800F # ADD R0 R0 #-1 ; 0008 103F # 0b111000000000001111 
18062 # BRnp CHECK_SR ; 0009 0BF9 # 0b11000000001100010 
50000 # RTI ; 000b 0000 # 0b1010000000000000000 
60024 # SLL R0 R1 #4 ; R5 <- p << 4 # 0b1100000000000100100 
61821 # SLL R6 R1 #1 ; R6 <- p << 1 # 0b1100001100000100001 
28006 # ADD R0 R0 R6 ; R5 <- p << 4 + p << 1 # 0b101000000000000110 
38C20 # ADD R3 R1 #0 ; R3 <- R1 # 0b111000110000100000 
28003 # ADD R0 R0 R3 ; R5 <- p << 4 + p << 1 + p # 0b101000000000000011 
28002 # ADD R0 R0 R2 ; R5 <- p << 4 + p << 1 + p + r # 0b101000000000000010 
50000 # RTI ; Result placed in R0 TODO need to add signed and 255 bit split # 0b1010000000000000000 
